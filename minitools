#!/bin/bash

# Define the version of Mini-Tools
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
VERSION=$(grep 'Mini-Tools' "$script_dir/mini_tools_list.txt" | awk -F'[()]' '{print $2}')

# Function to display the version
show_version() {
    echo "Mini-Tools version $VERSION"
}

# Function to display help
show_help() {
    echo "Usage: minitools [options]"
    echo
    echo "Options:"
    echo "  -v, --version        Display the version of Mini-Tools"
    echo "  -l, --list-tools     List available tools and unavailable tools"
    echo "  -up, --update        Update Mini-Tools from the repository"
    echo "  -i, --install        Install Mini-Tools"
    echo "  -h, --help           Display this help"
}

# Function to list available tools
list_tools() {
    local script_dir
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    if [[ -f "$script_dir/mini_tools_list.txt" ]]; then
        printf "%-30s %-20s %-10s %-50s\n" "Tool" "Command" "Version" "Description"
        printf "%-30s %-20s %-10s %-50s\n" "----" "--------" "-------" "-----------"
        while IFS= read -r tool; do
            name=$(echo "$tool" | awk -F' ' '{print $1}')
            file=$(echo "$tool" | awk -F'"' '{print $2}')
            version=$(echo "$tool" | awk -F'[()]' '{print $2}')
            description=$(echo "$tool" | awk -F'[][]' '{print $2}' | fold -s -w 50)
            first_line=true
            while IFS= read -r line; do
                if $first_line; then
                    if [[ -f "$script_dir/$file" ]]; then
                        printf "\e[32m%-30s\e[0m %-20s %-10s %-50s\n" "$name" "$file" "$version" "$line"
                    else
                        printf "\e[31m%-30s\e[0m %-20s %-10s %-50s\n" "$name" "$file" "$version" "$line"
                    fi
                    first_line=false
                else
                    printf "%-30s %-20s %-10s %-50s\n" "" "" "" "$line"
                fi
            done <<< "$description"
            printf "\n"
        done < "$script_dir/mini_tools_list.txt"
        printf "\e[32mAvailable tools\e[0m\n"
        printf "\e[31mUnavailable tools\e[0m\n"
    else
        echo "Le fichier mini_tools_list.txt est introuvable."
    fi
}

# Function to compare versions
version_greater() {
    if [[ "$(printf '%s\n' "$1" "$2" | sort -V | head -n 1)" != "$1" ]]; then
        return 0
    else
        return 1
    fi
}

# Function to update Mini-Tools from the repository
update_tools() {
    local repo_url="https://github.com/DIGYSKY/Mini-Tools.git"
    local script_dir
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    echo "Vérification des versions actuelles des outils..."
    local current_tools=()
    local current_versions=()
    if [[ -f "$script_dir/mini_tools_list.txt" ]]; then
        while IFS= read -r line; do
            tool_name=$(echo "$line" | awk -F' ' '{print $1}')
            tool_version=$(echo "$line" | awk -F'[()]' '{print $2}')
            current_tools+=("$tool_name")
            current_versions+=("$tool_version")
        done < "$script_dir/mini_tools_list.txt"
    else
        echo "Fichier mini_tools_list.txt local introuvable."
        return 1
    fi
    
    echo "Récupération des versions des outils du dépôt..."
    local repo_version_content
    repo_version_content=$(curl -s https://raw.githubusercontent.com/DIGYSKY/Mini-Tools/main/mini_tools_list.txt)
    if [[ -z "$repo_version_content" ]]; then
        echo "Impossible de récupérer le fichier mini_tools_list.txt du dépôt."
        return 1
    fi
    
    local repo_tools=()
    local repo_versions=()
    while IFS= read -r line; do
        tool_name=$(echo "$line" | awk -F' ' '{print $1}')
        tool_version=$(echo "$line" | awk -F'[()]' '{print $2}')
        repo_tools+=("$tool_name")
        repo_versions+=("$tool_version")
    done <<< "$repo_version_content"
    
    local updates_available=false
    for i in "${!repo_tools[@]}"; do
        local found=false
        for j in "${!current_tools[@]}"; do
            if [[ "${repo_tools[$i]}" == "${current_tools[$j]}" ]]; then
                found=true
                if version_greater "${repo_versions[$i]}" "${current_versions[$j]}"; then
                    echo "Une nouvelle version de ${repo_tools[$i]} est disponible: ${repo_versions[$i]} (actuelle: ${current_versions[$j]})"
                    updates_available=true
                fi
                break
            fi
        done
        if ! $found; then
            echo "Un nouvel outil est disponible: ${repo_tools[$i]} (version: ${repo_versions[$i]})"
            updates_available=true
        fi
    done
    
    if $updates_available; then
        read -p "Des mises à jour sont disponibles. Voulez-vous mettre à jour Mini-Tools ? (Y/n) " confirm
        if [[ "$confirm" == "Y" || "$confirm" == "y" || "$confirm" == "" ]]; then
            echo "Mise à jour de Mini-Tools depuis $repo_url dans le répertoire $script_dir"
            cd "$script_dir" || { echo "Impossible de changer de répertoire vers $script_dir"; exit 1; }
            git pull "$repo_url"
            if [[ $? -eq 0 ]]; then
                echo "Mise à jour réussie."
                install_tools
            else
                echo "Échec de la mise à jour."
            fi
        else
            echo "Mise à jour annulée."
        fi
    else
        echo "Tous les outils sont à jour."
    fi
}

install_tools() {
    cd "$script_dir" && ./install_MiniTools
}

# Parse command line arguments
case "$1" in
    -v|--version)
        show_version
        ;;
    -l|--list-tools)
        list_tools
        ;;
    -up|--update)
        update_tools
        ;;
    -h|--help)
        show_version
        echo
        show_help
        ;;
    -i|--install)
        install_tools
        ;;
    *)
        show_version
        echo
        show_help
        ;;
esac
