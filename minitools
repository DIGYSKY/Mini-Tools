#!/bin/bash

# Define the version of Mini-Tools
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
VERSION=$(grep 'Mini-Tools' "$script_dir/mini_tools_list.txt" | awk -F'[()]' '{print $2}')

# Function to display the version
show_version() {
    echo "Mini-Tools version $VERSION"
}

# Function to display help
show_help() {
    printf "\e[1mUsage:\e[0m minitools [options]\n"
    printf "\n"
    printf "\e[1mOptions:\e[0m\n"
    printf "  \e[33m-v, --version\e[0m        Display the version of Mini-Tools\n"
    printf "  \e[33m-l, --list-tools\e[0m     List available tools and unavailable tools\n"
    printf "  \e[33m-up, --update\e[0m        Update Mini-Tools from the repository\n"
    printf "  \e[33m-i, --install\e[0m        Install Mini-Tools\n"
    printf "  \e[33m-h, --help\e[0m           Display this help\n"
}

# Function to list available tools
list_tools() {
    local script_dir
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    if [[ -f "$script_dir/mini_tools_list.txt" ]]; then
        printf "%-22s %-20s %-10s %-50s\n" "Tool" "Command" "Version" "Description"
        printf "%-22s %-20s %-10s %-50s\n" "----" "--------" "-------" "-----------"
        while IFS= read -r tool; do
            name=$(echo "$tool" | awk -F' ' '{print $1}')
            file=$(echo "$tool" | awk -F'"' '{print $2}')
            version=$(echo "$tool" | awk -F'[()]' '{print $2}')
            description=$(echo "$tool" | awk -F'[][]' '{print $2}' | fold -s -w 50)
            first_line=true
            while IFS= read -r line; do
                if $first_line; then
                    if [[ -f "$script_dir/$file" ]]; then
                        printf "\e[32m%-22s\e[0m %-20s %-10s %-50s\n" "$name" "$file" "$version" "$line"
                    else
                        printf "\e[31m%-22s\e[0m %-20s %-10s %-50s\n" "$name" "$file" "$version" "$line"
                    fi
                    first_line=false
                else
                    printf "%-22s %-20s %-10s %-50s\n" "" "" "" "$line"
                fi
            done <<< "$description"
            printf "\n"
        done < "$script_dir/mini_tools_list.txt"
        printf "\e[32mAvailable tools\e[0m\n"
        printf "\e[31mUnavailable tools\e[0m\n"
    else
        echo "Le fichier mini_tools_list.txt est introuvable."
    fi
}

# Function to compare versions
version_greater() {
    if [[ "$(printf '%s\n' "$1" "$2" | sort -V | head -n 1)" != "$1" ]]; then
        return 0
    else
        return 1
    fi
}

# Function to update Mini-Tools from the repository
update_tools() {
    local repo_url="https://github.com/DIGYSKY/Mini-Tools.git"
    local script_dir
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    printf "\e[33mVérification des versions actuelles des outils...\e[0m\n"
    local current_tools=()
    local current_versions=()
    if [[ -f "$script_dir/mini_tools_list.txt" ]]; then
        while IFS= read -r line; do
            tool_name=$(echo "$line" | awk -F' ' '{print $1}')
            tool_version=$(echo "$line" | awk -F'[()]' '{print $2}')
            current_tools+=("$tool_name")
            current_versions+=("$tool_version")
        done < "$script_dir/mini_tools_list.txt"
    else
        printf "\e[31mFichier mini_tools_list.txt local introuvable.\e[0m\n"
        return 1
    fi
    
    printf "\e[33mRécupération des versions des outils du dépôt...\e[0m\n"
    local repo_version_content
    repo_version_content=$(curl -s https://raw.githubusercontent.com/DIGYSKY/Mini-Tools/main/mini_tools_list.txt)
    if [[ -z "$repo_version_content" ]]; then
        printf "\e[31mImpossible de récupérer le fichier mini_tools_list.txt du dépôt.\e[0m\n"
        return 1
    fi
    
    local repo_tools=()
    local repo_versions=()
    while IFS= read -r line; do
        tool_name=$(echo "$line" | awk -F' ' '{print $1}')
        tool_version=$(echo "$line" | awk -F'[()]' '{print $2}')
        repo_tools+=("$tool_name")
        repo_versions+=("$tool_version")
    done <<< "$repo_version_content"
    
    local updates_available=false
    for i in "${!repo_tools[@]}"; do
        local found=false
        for j in "${!current_tools[@]}"; do
            if [[ "${repo_tools[$i]}" == "${current_tools[$j]}" ]]; then
                found=true
                if version_greater "${repo_versions[$i]}" "${current_versions[$j]}"; then
                    printf "\e[33mUne nouvelle version de %s est disponible: %s (actuelle: %s)\e[0m\n" "${repo_tools[$i]}" "${repo_versions[$i]}" "${current_versions[$j]}"
                    updates_available=true
                fi
                break
            fi
        done
        if ! $found; then
            printf "\e[33mUn nouvel outil est disponible: %s (version: %s)\e[0m\n" "${repo_tools[$i]}" "${repo_versions[$i]}"
            updates_available=true
        fi
    done
    
    if $updates_available; then
        read -p "Des mises à jour sont disponibles. Voulez-vous mettre à jour Mini-Tools ? (Y/n) " confirm
        if [[ "$confirm" == "Y" || "$confirm" == "y" || "$confirm" == "" ]]; then
            printf "\e[32mMise à jour de Mini-Tools depuis %s dans le répertoire %s\e[0m\n" "$repo_url" "$script_dir"
            cd "$script_dir" || { printf "\e[31mImpossible de changer de répertoire vers %s\e[0m\n" "$script_dir"; exit 1; }
            
            git fetch --all
            git reset --hard origin/main
            if [[ $? -eq 0 ]]; then
                printf "\e[32mMise à jour réussie.\e[0m\n"
                install_tools
            else
                printf "\e[31mÉchec de la mise à jour.\e[0m\n"
            fi
        else
            printf "\e[31mMise à jour annulée.\e[0m\n"
        fi
    else
        printf "\e[32mTous les outils sont à jour.\e[0m\n"
    fi
}

install_tools() {
    cd "$script_dir" && ./install_MiniTools
}

# Parse command line arguments
case "$1" in
    -v|--version)
        show_version
        ;;
    -l|--list-tools)
        list_tools
        ;;
    -up|--update)
        update_tools
        ;;
    -h|--help)
        show_version
        echo
        show_help
        ;;
    -i|--install)
        install_tools
        ;;
    *)
        show_version
        echo
        show_help
        ;;
esac
