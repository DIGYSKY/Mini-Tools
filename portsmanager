#!/bin/bash

VERSION=$(grep 'Ports Manager' mini_tools_list.txt | awk -F'[()]' '{print $2}')

# Function to display help in French
show_help_fr() {
    printf "\e[1mPorts Manager %s\e[0m\n" "$VERSION"
    printf "\n"
    printf "\e[1mUsage:\e[0m\n"
    printf "  \e[32mportsmanager <port> [<port> ...]\e[0m\n"
    printf "  \e[32mportsmanager <port> [<port> ...] [--kill|-k] [-y]\e[0m\n"
    printf "  \e[32mportsmanager [--all|-a]\e[0m\n"
    printf "  \e[32mportsmanager [-all|-a] [--kill|-k] [-y]\e[0m\n"
    printf "  \e[32mportsmanager [--listen|-l] <port>\e[0m\n"
    printf "  \e[32mportsmanager [--kill-all|-ka]\e[0m\n"
    printf "  \e[32mportsmanager [--help|-h]\e[0m\n"
    printf "\n"
    printf "\e[1mDescription:\e[0m\n"
    printf "  \e[34mportsmanager est un outil de gestion des ports permettant\e[0m\n"
    printf "  \e[34mde lister et de gérer les processus écoutant sur des ports\e[0m\n"
    printf "  \e[34mspecifiques ou sur tous les ports ouverts.\e[0m\n"
    printf "\n"
    printf "\e[1mOptions:\e[0m\n"
    printf "  \e[33m<port>\e[0m             Spécifiez un ou plusieurs ports pour lesquels vous souhaitez lister les processus.\n"
    printf "  \e[33m--kill, -k\e[0m         Optionnel. Tuer les processus écoutant sur les ports spécifiés après confirmation.\n"
    printf "  \e[33m-y\e[0m                 Optionnel. Utilisé avec --kill pour tuer les processus sans confirmation.\n"
    printf "  \e[33m--all, -a\e[0m          Lister tous les ports ouverts.\n"
    printf "  \e[33m--listen, -l\e[0m       Écouter le trafique sur un port spécifique.\n"
    printf "  \e[33m--kill-all, -ka\e[0m    Tuer tous les processus écoutant sur tous les ports sans confirmation.\n"
    printf "  \e[33m--help\e[0m             Afficher ce message d'aide et quitter.\n"
    printf "\n"
    printf "\e[1mExemples:\e[0m\n"
    printf "  \e[32mportsmanager 80 443\e[0m               Lister les processus écoutant sur les ports 80 et 443\n"
    printf "  \e[32mportsmanager 80 443 --kill\e[0m        Lister et tuer les processus écoutant sur les ports 80 et 443 après confirmation\n"
    printf "  \e[32mportsmanager 80 443 --kill -y\e[0m     Lister et tuer les processus écoutant sur les ports 80 et 443 sans confirmation\n"
    printf "  \e[32mportsmanager --all\e[0m                Lister tous les ports ouverts\n"
    printf "  \e[32mportsmanager --all --kill\e[0m         Lister tous les ports ouverts et tuer les processus après confirmation\n"
    printf "  \e[32mportsmanager --kill-all\e[0m           Tuer tous les processus écoutant sur tous les ports sans confirmation\n"
}

# Function to display help in English
show_help_en() {
    printf "\e[1mPorts Manager %s\e[0m\n" "$VERSION"
    printf "\n"
    printf "\e[1mUsage:\e[0m\n"
    printf "  \e[32mportsmanager <port> [<port> ...]\e[0m\n"
    printf "  \e[32mportsmanager <port> [<port> ...] [--kill|-k] [-y]\e[0m\n"
    printf "  \e[32mportsmanager [--all|-a]\e[0m\n"
    printf "  \e[32mportsmanager [--listen|-l] <port>\e[0m\n"
    printf "  \e[32mportsmanager [--kill-all|-ka]\e[0m\n"
    printf "  \e[32mportsmanager [--help|-h]\e[0m\n"
    printf "\n"
    printf "\e[1mDescription:\e[0m\n"
    printf "  \e[34mportsmanager is a port management tool that allows you to list and manage processes listening on specific ports or all open ports.\e[0m\n"
    printf "\n"
    printf "\e[1mOptions:\e[0m\n"
    printf "  \e[33m<port>\e[0m             Specify one or more ports for which you want to list the processes.\n"
    printf "  \e[33m--kill, -k\e[0m         Optional. Kill the processes listening on the specified ports after confirmation.\n"
    printf "  \e[33m-y\e[0m                 Optional. Used with --kill to kill processes without confirmation.\n"
    printf "  \e[33m--all, -a\e[0m          List all open ports.\n"
    printf "  \e[33m--listen, -l\e[0m       Listen to the traffic on a specific port.\n"
    printf "  \e[33m--kill-all, -ka\e[0m    Kill all processes listening on all ports without confirmation.\n"
    printf "  \e[33m--help\e[0m             Display this help message and exit.\n"
    printf "\n"
    printf "\e[1mExamples:\e[0m\n"
    printf "  \e[32mportsmanager 80 443\e[0m               List processes listening on ports 80 and 443\n"
    printf "  \e[32mportsmanager 80 443 --kill\e[0m        List and kill processes listening on ports 80 and 443 after confirmation\n"
    printf "  \e[32mportsmanager 80 443 --kill -y\e[0m     List and kill processes listening on ports 80 and 443 without confirmation\n"
    printf "  \e[32mportsmanager --all\e[0m                List all open ports\n"
    printf "  \e[32mportsmanager --all --kill\e[0m         List all open ports and kill processes after confirmation\n"
    printf "  \e[32mportsmanager --kill-all\e[0m           Kill all processes listening on all ports without confirmation\n"
}

# Determine the system language
LANGUAGE=$(defaults read -g AppleLocale | cut -d'_' -f1)

# Function to display help in the appropriate language
show_help() {
    case $LANGUAGE in
        fr)
            show_help_fr
            ;;
        *)
            show_help_en
            ;;
    esac
}

# Check if the user requested help
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
    exit 0
fi

# Initialize variables
PORTS=()
ALL_PORTS=false
KILL_OPTION=false
KILL_ALL=false
CONFIRMATION=true

listen_port() {
    if [ -z "$1" ]; then
        printf "${RED}Erreur: le port n'est pas spécifié.${RESET}\n"
        exit 1
    fi
    local port=$1
    sudo ngrep -d any port $port
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --all|-a)
            ALL_PORTS=true
            shift
            ;;
        --kill|-k)
            KILL_OPTION=true
            shift
            ;;
        --kill-all|-ka)
            KILL_ALL=true
            shift
            ;;
        -y)
            CONFIRMATION=false
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        --listen|-l)
            listen_port $2
            exit 0
            ;;
        *)
            if [[ "$1" =~ ^[0-9]+$ ]]; then
                PORTS+=("$1")
                shift
            else
                show_help
                exit 0
            fi
            ;;
    esac
done

# If neither a port nor the --all option is specified, display help
if [[ ${#PORTS[@]} -eq 0 && "$ALL_PORTS" == false && "$KILL_ALL" == false ]]; then
    show_help
    exit 64  # Exit code for misuse
fi

# Function to display and optionally kill processes by port
process_port() {
    local port=$1
    lsof_output=$(sudo lsof -i :$port | grep LISTEN)
    
    # Check if lsof found any processes
    if [[ -z "$lsof_output" ]]; then
        echo "No process is listening on port $port"
        return
    fi

    # Afficher l'en-tête
    printf "\n+-----------+\n"
    printf "\e[32m| Port: $port |\e[0m\n"
    printf "+-----------+\n"
    printf "+--------+--------+--------------+----------+--------+\n"
    printf "| \e[33mPID\e[0m    | \e[33mUser\e[0m   | \e[34mApplication\e[0m  | \e[31mProtocol\e[0m | \e[32mName\e[0m   |\n"
    printf "+--------+--------+--------------+----------+--------+\n"

    # Lire la sortie de lsof ligne par ligne
    echo "$lsof_output" | while IFS= read -r line; do
        # Extraire les informations nécessaires
        pid=$(echo "$line" | awk '{print $2}')
        user=$(echo "$line" | awk '{print $3}')
        address=$(echo "$line" | awk '{print $9}')
        protocol=$(echo "$line" | awk '{print $8}')
        name=$(echo "$line" | awk '{print $1}')
        
        # Obtenir le nom de l'application à partir du PID
        app_name=$(ps -p "$pid" -o comm= 2>/dev/null)

        # Vérifier si le nom de l'application a été trouvé
        if [[ -z "$app_name" ]]; then
            app_name="N/A"
        fi
        
        # Calculer la largeur des colonnes
        pid_width=${#pid}
        user_width=${#user}
        app_name_width=${#app_name}
        protocol_width=${#protocol}
        name_width=${#name}

        # Afficher toutes les informations sous forme de tableau
        printf "| \e[33m%-${pid_width}s\e[0m | %-${user_width}s | \e[34m%-${app_name_width}s\e[0m | \e[31m%-${protocol_width}s\e[0m | \e[32m%-${name_width}s\e[0m |\n" "$pid" "$user" "$app_name" "$protocol" "$name"
    done

    # Confirmation to kill processes
    if [[ "$KILL_OPTION" == true ]]; then
        if [[ "$CONFIRMATION" == true ]]; then
            read -p "Do you want to kill all processes listening on port $port? (Y/n default: n) " confirm
        else
            confirm="Y"
        fi
        if [[ "$confirm" == "Y" ]]; then
            echo "$lsof_output" | while IFS= read -r line; do
                pid=$(echo "$line" | awk '{print $2}')
                app_name=$(ps -p "$pid" -o comm= 2>/dev/null)
                echo "Killing process $pid ($app_name)..."
                sudo kill -9 "$pid"
                if [[ $? -eq 0 ]]; then
                    echo "Process $pid ($app_name) killed successfully."
                else
                    echo "Failed to kill process $pid ($app_name)."
                fi
            done
        else
            echo "Skipping killing processes on port $port"
        fi
    fi
}

# Process specified ports or all ports
if [[ "$ALL_PORTS" == true || "$KILL_ALL" == true ]]; then
    # Retrieve all open ports
    all_ports=$(sudo lsof -i -P -n | grep LISTEN | awk -F':' '{print $2}' | awk '{print $1}' | sort | uniq)
    for port in $all_ports; do
        process_port $port
        # Kill all processes without confirmation if the --kill-all option is specified
        if [[ "$KILL_ALL" == true ]]; then
            echo "$lsof_output" | while IFS= read -r line; do
                pid=$(echo "$line" | awk '{print $2}')
                app_name=$(ps -p "$pid" -o comm= 2>/dev/null)
                echo "Killing process $pid ($app_name)..."
                sudo kill -9 "$pid"
                if [[ $? -eq 0 ]]; then
                    echo "Process $pid ($app_name) killed successfully."
                else
                    echo "Failed to kill process $pid ($app_name)."
                fi
            done
        fi
    done
else
    # Process specified ports one by one
    for port in "${PORTS[@]}"; do
        process_port $port
    done
fi

exit 0  # Exit code for success
